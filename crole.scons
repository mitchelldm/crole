# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

import os, os.path, platform


env = Environment()

env['ENV']['TERM'] = os.environ['TERM'] # Enable colors in build logs

# Compiler arguments
env.Append(CPPPATH = ["include", "external/tinycthread/source"])
env.Append(CCFLAGS = ["-Wall", "-Wpedantic", "-Wextra"])
env.Append(CFLAGS = ["--std=c11"])
env.Append(CXXFLAGS = ["--std=c++14"])

if ARGUMENTS.get('mode', 0) == "release":
	env.Append(CCFLAGS = ["-O3"])
else:
	env.Append(CCFLAGS = ["-g", "-O0"])

# Crole itself
crole_src = ["dllist.c", "ref.c", "vec.c"]
crole_src_files = map(lambda name: "src/" + name, crole_src)
crole_src_files.extend(["external/tinycthread/source/tinycthread.c"])
crole_static = env.StaticLibrary(target = "crole", source = crole_src_files)
crole_shared = env.SharedLibrary(target = "crole", source = crole_src_files)

# Libs
libs = [crole_static, "pthread"]

# Crole tests
crole_test_src = ["main.c", "test_dllist.c", "test_ref.c", "test_vec.c"]
crole_test_src_files = map(lambda name: "test/" + name, crole_test_src)
crole_test = env.Program(target = "crole-test", source = crole_test_src_files, LIBS = libs, LIBPATH = ".")
test_alias = env.Alias("test", [crole_test], crole_test[0].abspath)
env.AlwaysBuild(test_alias)

# Crole benchmarks
benchmarks = []
benchmarks.append(env.Program(target = "bench-dllist", source = ["bench/bench-dllist.c"], LIBS = libs, LIBPATH = "."))
benchmarks.append(env.Program(target = "bench-std-list", source = ["bench/bench-std-list.cpp"]))
benchmarks.append(env.Program(target = "bench-vec", source = ["bench/bench-vec.c"], LIBS = libs, LIBPATH = "."))
benchmarks.append(env.Program(target = "bench-std-vector", source = ["bench/bench-std-vector.cpp"]))

bench_alias = Alias("bench", benchmarks, map(lambda bench_name: "time {}".format(bench_name[0].abspath), benchmarks))
env.AlwaysBuild(bench_alias)

# Install
env.Install("/usr/local/lib", crole_static)
env.Install("/usr/local/lib", crole_shared)
env.Alias("install", "/usr/local/lib")
